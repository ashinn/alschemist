
(define (wiki-write-main x par note out)
  (define (wiki-write x note) (wiki-write-main x par note out))
  (cond
   ((pair? x)
    (case (car x)
      ((note)
       (cond
        ((and (string? (cadr x)) (string-prefix? "image:" (cadr x)))
         note)
        (else
         (write-string "<span class=\"notelink\"><sup>[" out)
         (write-string note out)
         (write-string "]</sup></span>" out)
         (+ note 1))))
      ((wiki)
       (write-string "<a href=\"" out)
       (if (not (or (string->uri (cadr x))
                    (and (> (string-length (cadr x)) 0)
                         (eqv? #\/ (string-ref (cadr x) 0)))))
           ;; XXXX lookup wiki dir
           (write-string "/wiki/" out))
       (write-string (cadr x) out)
       (write-string "\"" out)
       (cond
        ((and (pair? (cddr x)) (pair? (cdddr x)) (string? (cadddr x)))
         (write-string " onmouseover=\"javascript:shownote('doc" out)
         (write-string par out)
         (write-string "', '" out)
         (write-string (string-join (string-split (cadddr x) #\") "&quot;") out)
         (write-string "')\"" out)
         ;;(write-string " onmouseout=\"javascript:hidenote('doc")
         ;;(write-string par)
         ;;(write-string "')\"")
         ))
       (write-string ">" out)
       (write-string (wiki-word-display (or (caddr x) (cadr x))) out)
       (write-string "</a>" out)
       note)
      (else
       (cond
        ((symbol? (car x))
         (let* ((attrs? (and (pair? (cdr x)) (pair? (cadr x))
                             (eq? '@ (caadr x))))
                (attrs (if attrs? (cdadr x) '())))
           (write-string (html-tag->string (car x) attrs) out)
           (let ((note (fold wiki-write note (if attrs? (cddr x) (cdr x)))))
             (write-string "</" out)
             (write-string (car x) out)
             (write-string ">" out)
             note)))
        (else
         (fold wiki-write note x))))))
   (else
    (write-string (if (string? x) (html-escape x) x) out)
    note)))

(define (wiki-write-notes x par note out)
  (cond
   ((not (pair? x))
    note)
   ((eq? 'note (car x))
    (cond
     ((and (string? (cadr x)) (string-prefix? "image:" (cadr x)))
      (write-string "<img src=\"" out)
      (write-string (substring (cadr x) 6) out)
      (write-string "\" />" out)
      note)
     (else
      (write-string "<p><span class=\"notelink\">[" out)
      (write-string note out)
      (write-string "]</span>" out)
      (wiki-write-main (cadr x) par note out)
      (write-string "</p>\n" out)
      (+ note 1))))
   (else
    (let ((note (wiki-write-notes (car x) par note out)))
      (wiki-write-notes (cdr x) par note out)))))

(define (wiki-write-row x par note out)
  (write-string "<tr>\n<td id=\"doc" out)
  (write-string par out)
  (write-string "\" class=\"doc\" width=\"200px\" ></td>\n" out)
  (write-string "<td class=\"main\">\n" out)
  (let ((note2 (wiki-write-main x par note out)))
    (write-string "</td>\n<td class=\"note\">\n" out)
    (wiki-write-notes x par note out)
    (write-string "\n</td>\n</tr>\n" out)
    note2))

(define (wiki-write x . o)
  (let* ((out (if (pair? o) (car o) (current-output-port)))
         (par (if (and (pair? o) (pair? (cdr o))) (cadr o) 1))
         (note (if (and (pair? o) (pair? (cdr o)) (pair? (cddr o)))
                   (car (cddr o))
                   1)))
    (write-string "<table>\n" out)
    (let ((res (fold (lambda (x par note) (wiki-write-row x par note out))
                     note x (iota (length x) par))))
      (write-string "</table>\n" out)
      res)))
