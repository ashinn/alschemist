
(define-library (chibi finance asset-test)
  (import (scheme base) (chibi finance asset) (chibi test))
  (export run-tests)
  (begin
    (define (run-tests)
      (parameterize ((finance-offline-data? #t))
        (test-group "(chibi finance asset)"
          (let* ((town (make-asset "TownBank" 1000 'USD))
                 (my (make-asset "MyBank" 100000 'JPY))
                 (aapl (make-stock 'AAPL 230. 'USD))
                 (nvda (make-stock 'NVDA 182. 'USD))
                 (broker (make-portfolio
                          "MyBroker"
                          (list (make-asset "Apple" 100 aapl)))))
            (test-assert (asset? town))
            (test "TownBank" (asset-name town))
            (test 1000 (asset-value town))
            (test 'USD (asset-unit town))
            (test-assert (asset? my))
            (test "MyBank" (asset-name my))
            (test 100000 (asset-value my))
            (test 'JPY (asset-unit my))
            (test-assert (stock? aapl))
            (test 'AAPL (stock-symbol aapl))
            (test 230. (stock-price aapl))
            (test 'USD (stock-currency aapl))
            (test-assert (portfolio? broker))
            (test "MyBroker" (portfolio-name broker))
            (test 1 (length (portfolio-assets broker)))
            (test 23000. (portfolio-value-in broker 'USD '((JPY . .01))))
            (test 2300000. (portfolio-value-in broker 'JPY '((USD . 100.))))
            (test '(("Apple" . 23000.0))
                (portfolio-values->alist broker 'USD '((JPY . .01))))
            (let ((asset (car (portfolio-assets broker))))
              (test "Apple" (asset-name asset))
              (test 23000. (asset-value-in asset 'USD 1.))
              (test 2300000. (asset-value-in asset 'JPY 100.)))
            (portfolio-sell! broker 50 aapl)
            (test 2 (length (portfolio-assets broker)))
            (test 23000. (portfolio-value-in broker 'USD '((JPY . .01))))
            (test 2300000. (portfolio-value-in broker 'JPY '((USD . 100.))))
            (test '(("MyBroker:USD" . 11500.0)
                    ("Apple" . 11500.0))
                (portfolio-values->alist broker 'USD '((JPY . .01))))
            (test '((stock . 11500.)
                    (liquid . 11500.))
                (portfolio-values-by-type broker 'USD '((JPY . .01))))
            (let ((asset (car (portfolio-assets broker))))
              (test "MyBroker:USD" (asset-name asset))
              (test 11500. (asset-value asset))
              (test 'USD (asset-unit asset))
              (test 11500. (asset-value-in asset 'USD 1.))
              (test 1150000. (asset-value-in asset 'JPY 100.)))
            (let ((asset (cadr (portfolio-assets broker))))
              (test "Apple" (asset-name asset))
              (test 11500. (asset-value-in asset 'USD 1.))
              (test 1150000. (asset-value-in asset 'JPY 100.)))
            (portfolio-add-asset! broker (make-asset "Nvidia" 100 nvda))
            (test 3 (length (portfolio-assets broker)))
            (test 41200.
                (portfolio-value-in broker 'USD '((JPY . .01))))
            (test 4120000.
                (portfolio-value-in broker 'JPY '((USD . 100.))))
            (test '(("Nvidia" . 18200.0)
                    ("MyBroker:USD" . 11500.0)
                    ("Apple" . 11500.0))
                (portfolio-values->alist broker 'USD '((JPY . .01))))
            (portfolio-liquidate! broker 20000. 'USD '((JPY . .01)))
            (test '(("Nvidia" . 0.0)
                    ("MyBroker:USD" . 31500.0)
                    ("Apple" . 9700.0))
                (portfolio-values->alist broker 'USD '((JPY . .01))))
            (test '((liquid . 31500.)
                    (stock . 9700.))
                (portfolio-values-by-type broker 'USD '((JPY . .01))))
            ))))))
