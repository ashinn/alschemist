
(define-library (chibi image-test)
  (import (scheme base) (scheme list) (srfi 179)
          (chibi image base) (chibi test))
  (export run-tests)
  (begin
    (define (flatten ls)
      (if (pair? (car ls))
          (append-map flatten ls)
          ls))
    (define (tensor nested-ls . o)
      (let lp ((ls nested-ls) (lens '()))
        (cond
         ((pair? ls) (lp (car ls) (cons (length ls) lens)))
         (else
          (apply list->array
                 (flatten nested-ls)
                 (make-interval (list->vector (reverse lens)))
                 o)))))
    (define (array= a . arrays)
      (and (every (lambda (b) (interval= (array-domain a) (array-domain b)))
                  arrays)
           (apply array-every = a arrays)))
    (define-syntax test-array
      (syntax-rules ()
        ((test-array expected expr)
         (test-equal array= expected expr))))
    (define-syntax test-interval
      (syntax-rules ()
        ((test-interval . args) (test-equal interval= . args))))
    (define (run-tests)
      (test-begin "image")
      (let*-values (((image) (make-image 5 5))
                    ((red green blue) (image-channels image)))
        (test-assert (image? image))
        (test 5 (image-height image))
        (test 5 (image-width image))
        (test-interval (make-interval '#(5 5 3))
                       (array-domain (image-array image)))
        (test-interval (make-interval '#(5 5))
                       (array-domain red))
        (array-set! red 255 1 2)
        (test 255 (array-ref red 1 2))
        (test 0 (array-ref (image-array image) 1 1 0))
        (test 255 (array-ref (image-array image) 1 2 0))
        (test 0 (array-ref (image-array image) 1 2 1)))
      (let ((image (array->image
                    (tensor '(((0 0 0) (1 1 1)) ((2 2 2) (3 3 3)))
                            u8-storage-class)))
            (pixmap (array->pixmap
                     (tensor '((#x000000 #x010101) (#x020202 #x030303))
                             u32-storage-class))))
        (test-assert (image? image))
        (test 2 (image-height image))
        (test 2 (image-width image))
        (test-assert (pixmap? pixmap))
        (test 2 (pixmap-height pixmap))
        (test 2 (pixmap-width pixmap))
        (test-array (pixmap-array pixmap)
          (pixmap-array (image->pixmap image)))
        (test-array (image-array image)
          (image-array (pixmap->image pixmap))))
      (test-end))))
